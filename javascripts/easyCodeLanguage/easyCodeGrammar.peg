// TODO gérer la detection des variables non initialisée
{
	/**
	 * emlation of indexOf for old navigator
	 */
	if (!Array.indexOf) {
	  Array.indexOf = [].indexOf ?
		  function (arr, obj, from) { return arr.indexOf(obj, from); }:
		  function (arr, obj, from) { // (for IE6)
			var l = arr.length,
				i = from ? parseInt( (1*from) + (from<0 ? l:0), 10) : 0;
			i = i<0 ? 0 : i;
			for (; i<l; i++) {
			  if (i in arr  &&  arr[i] === obj) { return i; }
			}
			return -1;
		  };
	}
	
	if(!Array.isArray) {
	  Array.isArray = function(arg) {
		return Object.prototype.toString.call(arg) === '[object Array]';
	  };
	}
	
	/**
	 * create object with the current line and column
	 */
	function computeOffset(param) {
		if (param) {
			param.offset = computeOffset();
			return param;
		}
		return {line : line(), column : column(), offset : offset()};
	}
	
	/**
	 * create of block of instruction
	 */
	function createBlock(lines) {
		var ret = [];
		for (var i in lines) {
			if (lines[i]) {
				ret.push(lines[i]);
				// check declare and var usage
			}
		}
		
		return ret;
	}
	
	/**
	 * create a condition structure
	 */
	function createCondition(test, yes, no, elseif) {
		var condition = {
			type : 'condition',
			test : test,
			yes : yes,
			offset : computeOffset()
		};
		var currentIf = condition;
		if (elseif && elseif.length > 0) {
			for (var i in elseif) {
				currentIf.no = [elseif[i]];
				currentIf = elseif[i];
			}
		}
		currentIf.no = no;
		return condition;
	}
	
	/**
	 * créé une action d'affectation
	 */
	function createAffectation(varname, expression) {
		return {type : 'command', commandName : 'affectation', varname : varname, expression : expression, offset : computeOffset()};
	}
	
	function createVar(name, indexs, attribute) {
		if (Array.isArray(name)) {
			name = name.join('');
		}
		
		return {
			type : 'var',
			name : name.toUpperCase(),
			offset : computeOffset(),
			indexs : indexs,
			attribute : attribute
		}
	}
	
	var languageKeyWord = ['VRAI', 'FAUX', 'NULL', 'PARENT']
	function checkVarName(varname) {
		if (Array.indexOf(languageKeyWord, varname) >= 0) {
			throw new SyntaxError(varname + ' et un nom reservé.');
		}
	}
	
	// priority of operations
	var operationPriority = {
		"-" : 1,
		"+" : 1,
		"&&" : 3,
		"||" : 2,
		"*" : 0,
		"/" : 0,
		"%" : 0
	}
	
	/**
	 * create an arithmetique or boolean instruction
	 */
	function CreateOperation(operation, left, right, type) {
		if (right 
				&& right.operation 
				&& !right.priority 
				&& operationPriority[right.operation] == operationPriority[operation]
				&& right.type == type
			) {
			// récupération de l'element le plus à droites
			// il faut en fait ajouter l'operation à la gauche de l'operation de droit
			// mostLeft représente le dernier objet qui a un element à gauche
			var mostLeft = right;
			while (mostLeft.left.left && !mostLeft.left.priority && mostLeft.left.type == mostLeft.type) {
				mostLeft = mostLeft.left;
			}
			
			// on va recréer l'operation courrante dans la partie la plus à gauche
			mostLeft.left = CreateArithmetique(operation, left , mostLeft.left);
			return right;
		}
		
		return {
			type : type,
			priority : false,
			operation : operation,		
			left : left,
			right : right,
			offset : computeOffset()
		}
	}
	
	function CreateArithmetique(operation, left, right) {
		return CreateOperation(operation, left, right, "numerique");
	}
	
	function CreateArithmetiqueBoolean(operation, left, right) {
		return CreateOperation(operation, left, right, "boolean");
	}
	
	/**
	 * call when a function is call on a other function
	 * as test.test().test()
	 */
	function ChangeLastAttributeByMethod(variable, methodParameters, nextAccess) {
		var varForAddnextAccess = null;
		if (!variable.attribute) {
			variable.type = "function"
			variable.name = variable.name.toLowerCase();
			variable.params = methodParameters;
			varForAddnextAccess = variable;
		} else {		
			var lastAttribute = variable;
			while (variable.attribute && variable.attribute.attribute) {
				lastAttribute = variable.attribute;
			}
			
			lastAttribute.method = {
				name : lastAttribute.attribute.name.toLowerCase(),
				params : methodParameters
			};
			
			delete lastAttribute.attribute;
			varForAddnextAccess = lastAttribute;
		}
		
		if (nextAccess) {
			if (nextAccess.type == "function") {
				varForAddnextAccess.method = nextAccess;
				delete nextAccess.type;
			} else {
				varForAddnextAccess.attribute = nextAccess;
			}
		}
		
		return variable;
	}
	
	
}


// start the document. each expression end with an \n
start 
	= block:block {return block}

block 
	= eatSpace codeLines:codeLine* {return createBlock(codeLines)}
	
// list all possible expression
codeLine 
  = eatSpace code:(
    emptyLine // cas de la ligne vide
   / define
   / ifblock
   / whileblock
   / foreachblock
   / oneLineComment
   / multilineComment
   / lire
   / affectation
   / methodCall
   / ecrire
   ) [\n\ \t]* {return code}
	

/********************************************************************************
**** GESTION DES EXPRESSION MATHEMATIQUE (BOOLEEN, ARITHMETIQUE *****************
*********************************************************************************/
nonBooleanExpression
	=  notPrioritary
	
booleanExpression 
	= notPrioritaryBoolean


/* TODO gérer le problème de l'expression test * 5 qui passe dans le booleanExpression */
expression 
	= booleanExpression
	/ nonBooleanExpression
	
comparaisonMembre 
	= 'VRAI'i {return true}
	/ 'FAUX'i {return false}
	/ varName
	/ nonBooleanExpression
	
booleanPrimary
	= 'VRAI'i {return true}
	/ 'FAUX'i {return false}
	/ methodCall
	/ varName
	/ "(" eatSpace booleanExpression:booleanExpression  eatSpace ")"	{booleanExpression.priority = true; return booleanExpression}
	/ "!" eatSpace expr:comparaison {return {type : 'reversBoolean', bool : expr}}
	
comparaison 
	= left:booleanPrimary eatSpace oper:("=="/"!=") eatSpace right:booleanPrimary {return {type : 'comparaison', left : left, right : right, operation : oper}}
	/ left:nonBooleanExpression eatSpace oper:(">="/"<="/"<"/ ">"/ "=="/"!=") eatSpace right:nonBooleanExpression {return {type : 'comparaison', left : left, right : right, operation : oper}}
	/ nonBooleanExpression
	/ booleanPrimary
	
	
notPrioritaryBoolean
	= left:priotaryBoolean eatSpace oper:("ET"i) eatSpace right:notPrioritaryBoolean {return CreateArithmetiqueBoolean("&&", left, right)}
	/ priotaryBoolean
	
priotaryBoolean
	= left:comparaison eatSpace oper:("OU"i) eatSpace right:priotaryBoolean {return CreateArithmetiqueBoolean("||", left, right)}
	/ comparaison
	
notPrioritary 
	= left:priotary eatSpace oper:("+"/"-") eatSpace right:notPrioritary {return CreateArithmetique(oper, left, right)}
	/ priotary
	
priotary =
	left:primitive eatSpace oper:("*"/"/"/"%") eatSpace right:priotary {return CreateArithmetique(oper, left, right)}
	/ primitive

primitive =
	string
	/ car
	/ integer
	/ methodCall
	/ varName 
	/ arrayDefinition
	/ "(" eatSpace calc:notPrioritary eatSpace ")" {calc.priority = true; return calc}
	
arrayDefinition 
	= '[' eatSpace elements:arrayElements* eatSpace lastElement:arrayElement? eatSpace ']' {if (lastElement) {elements.push(lastElement)}; return {offset : computeOffset(), elements : elements, type : 'array'}}

arrayElements 
	= arrayElement:arrayElement eatSpace ';' eatSpace {return arrayElement}
	
arrayElement
	= name:nameOfParameter eatSpace ':' eatSpace expression:expression eatSpace  {return {expression : expression, name : name}}
	/ expression:expression eatSpace {return {expression : expression}}

	
/************************************************************************************
***** INSTRUCTION DE BASE DU LANGUAGE ***********************************************
************************************************************************************/
	
// define a variable
define
	= 'DEFINIR'i anySpace varname:varName anySpace type:types {checkVarName(varname.name); return computeOffset({type : 'command', commandName : 'define', varname : varname, vartype : type})}
// write an expression
ecrire 
	= 'ECRIRE'i anySpace expression:expression output:ecrireOutput?{return computeOffset({type : 'command', commandName : 'write', params : [expression], output : output})}

ecrireOutput
	= anySpace [\'\"] string:('erreur'i/'info'i) [\'\"] {return string == 'erreur' ? 'error' : 'info'}
	
// read a variable
lire 
	= 'LIRE'i anySpace varname:varName {return computeOffset({type : 'command', commandName : 'read', varname : varname})}

affectation 
	= varname:varName eatSpaceWithoutBackSpace '=' eatSpaceWithoutBackSpace expression:expression {return createAffectation(varname, expression)}
	
oneLineComment
	= '//' [^\n]* {return undefined}

multilineComment
	= '/*' [^*]* '*/' {return undefined}
	
/********************************************************************************
************** STRUCTURE CONDITIONNELLE *****************************************
********************************************************************************/
ifblock 
	= 'SI'i anySpace expr:booleanExpression eatSpaceWithoutBackSpace [\n] blockYes:block blockElseIf:ifelseifblock*  blockNo:ifelseblock? 'FIN_SI'i  { return createCondition(expr, blockYes, blockNo, blockElseIf)}
ifelseblock 
	= 'SI_NON'i eatSpaceWithoutBackSpace [\n] block:block {return block}
ifelseifblock 
	= 'SI_NON SI'i anySpace expr:booleanExpression eatSpaceWithoutBackSpace [\n] block:block {return createCondition(expr, block)}
	
// while boucle
whileblock
	= 'TANT_QUE'i anySpace expr:booleanExpression eatSpaceWithoutBackSpace [\n] block:block 'FIN_TANT_QUE'i {return {type : 'while', test : expr, block : block, offset : computeOffset()}}

foreachblock
	= 'POUR'i anySpace varname:varName anySpace 'DE'i anySpace start:(integer/car) anySpace 'A'i anySpace end:(integer/car) step:step? eatSpaceWithoutBackSpace [\n] block:block 'FIN_POUR'i {return {type : 'for', varname : varname, start : start, end : end, block : block, offset : computeOffset(), step : step}}
	 /'POUR'i anySpace varname:varName anySpace 'DANS'i anySpace array:(varName/arrayDefinition) eatSpaceWithoutBackSpace [\n] block:block 'FIN_POUR'i {return {type : 'forEach', varname : varname, array : array, block : block}}

step
	= anySpace 'PAR' anySpace integer:integer {return integer}
	
/*************************************************************************
******* PREDICAT DE L'APPLICATION ****************************************
*************************************************************************/
// regex for varname
varName
	= varname:[a-zA-Z\_]+ eatSpace indexs:arrayAccessParameter+ {return createVar(varname, indexs)}
	/ varname:[a-zA-Z\_]+ eatSpace attribute:attributAccess {return createVar(varname, undefined, {name : attribute.name})}
	/ varname:[a-zA-Z\_]+ {return createVar(varname)}
	
arrayAccessParameter
	= '[' eatSpace index:(integer/string/car)? eatSpace ']' {return index == undefined ? 'ADD_AT_END' : index}
	
nameOfParameter 
	= varname:[a-zA-Z\_]+ {return varname.join('')}
	
attributAccess
	= '.' varname:varName {return varname}

methodCall 
	= varname:varName '(' eatSpace params:functionParameters* eatSpace ')' otherAccess:haveOtherAccess? {return ChangeLastAttributeByMethod(varname, params, otherAccess)}

haveOtherAccess 
	= '.' call:methodCall {return call}
	/ '.' varname:varName {return varname}
	
functionParameters
	= parameter:expression eatSpace ',' eatSpace {return parameter}
	/ expression
	
functionName
	= functionName:[a-zA-Z\_]+ {return functionName.join('')}
	
// all types possible in language
types 
	= 'NOMBRE'i {return "number"}
	/ 'CHAINE'i {return "string"}
	/ 'TABLEAU'i {return "array"}
	/ 'BOOLEEN'i {return "boolean"}
	
string 
	= '"' string:(specialStringDoubleQuote / [^\"] )* '"' {return string.join('')} 
	/ "'" string:(specialStringSimpleQuote / [^\'] )* "'" {return string.join('')} 
	/ methodCall
	/ varName

specialStringDoubleQuote = '\\"' {return '"';}
specialStringSimpleQuote = "\\'" {return "'";}

car 
	= "'" car:. "'" {return car}
	/ methodCall
	/ varName
	
integer
  = digits:[0-9]+ ('.'/',') decimal:[0-9]+ { return parseFloat(digits.join('') + '.' + decimal.join('')); }
  / digits:[0-9]+ { return parseInt(digits.join(''), 10); }
  / methodCall
  / varName
  
 /************************************************************************
 ************* UTILITAIRES ***********************************************
 ************************************************************************/

// spaceCaractere
anySpace
	= [\ \t]+ {return undefined}

eatSpaceWithoutBackSpace 
	= [\ \t]* {return undefined} 

eatSpace 
	= [\ \t\n]* {return undefined}

emptyLine "ligne vide"
	= [\n] {return undefined} 
	
